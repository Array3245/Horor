import asyncio
import logging
import os
import tempfile
import random
from io import BytesIO
import aiohttp
import aiofiles
import edge_tts
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from moviepy.editor import ImageClip, AudioFileClip, CompositeVideoClip, TextClip
from PIL import Image, ImageDraw, ImageFont
import requests
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
HUGGINGFACE_TOKEN = os.getenv("HUGGINGFACE_TOKEN", "YOUR_HUGGINGFACE_TOKEN_HERE")

# API endpoints
STABLE_DIFFUSION_API = "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5"
TEXT_GENERATION_API = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

class HorrorVideoGenerator:
    def __init__(self):
        self.horror_prompts = [
            "A dark abandoned house at midnight with glowing windows",
            "Creepy forest with twisted trees and fog",
            "Old cemetery with weathered tombstones and mist",
            "Haunted mansion with broken windows and ivy",
            "Dark alley with flickering streetlight",
            "Abandoned hospital corridor with flickering lights",
            "Old church at night with storm clouds",
            "Foggy swamp with dead trees"
        ]
        
        self.horror_stories_templates = [
            "–í —Å—Ç–∞—Ä–æ–º—É –±—É–¥–∏–Ω–∫—É –Ω–∞ –∫—Ä–∞—é –º—ñ—Å—Ç–∞...",
            "–ú–∏–Ω—É–ª–æ—ó –Ω–æ—á—ñ —è –ø–æ—á—É–≤ –¥–∏–≤–Ω—ñ –∑–≤—É–∫–∏...", 
            "–ö–æ–ª–∏ —è –∑–∞–π—à–æ–≤ —É –ø–æ–∫–∏–Ω—É—Ç—É –ª—ñ–∫–∞—Ä–Ω—é...",
            "–ù–∞ —Ü–≤–∏–Ω—Ç–∞—Ä—ñ –æ –ø—ñ–≤–Ω–æ—á—ñ...",
            "–£ —Ç–µ–º–Ω–æ–º—É –ª—ñ—Å—ñ —è –ø–æ–±–∞—á–∏–≤...",
            "–°—Ç–∞—Ä–∏–π –¥–∑–µ—Ä–∫–∞–ª–æ –≤ –∞–Ω—Ç–∏–∫–≤–∞—Ä–Ω—ñ–π –∫—Ä–∞–º–Ω–∏—Ü—ñ...",
            "–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –æ 3:33 —Ä–∞–Ω–∫—É...",
            "–ü—ñ–¥–≤–∞–ª —Å—Ç–∞—Ä–æ–≥–æ –±—É–¥–∏–Ω–∫—É –ø—Ä–∏—Ö–æ–≤—É–≤–∞–≤..."
        ]

    async def generate_horror_story(self):
        """–ì–µ–Ω–µ—Ä—É—î —Å—Ç—Ä–∞—à–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é"""
        template = random.choice(self.horror_stories_templates)
        
        # –ü—Ä–æ—Å—Ç–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ—Å—Ç–æ—Ä—ñ–π (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –®–Ü)
        story_parts = [
            "—Ç–µ–º–Ω–æ—Ç–∞ –æ–≥–æ—Ä—Ç–∞–ª–∞ –≤—Å–µ –Ω–∞–≤–∫—Ä—É–≥–∏",
            "—Ä–∞–ø—Ç–æ–≤–æ –ø–æ—á—É–ª–∏—Å—è –∫—Ä–æ–∫–∏ –∑–∞ —Å–ø–∏–Ω–æ—é", 
            "—Ö–æ–ª–æ–¥–Ω–∏–π –≤—ñ—Ç–µ—Ä –ø—Ä–æ–Ω–∏–∑–∞–≤ –¥–æ –∫—ñ—Å—Ç–æ–∫",
            "—Ç—ñ–Ω—ñ –ø–æ—á–∞–ª–∏ —Ä—É—Ö–∞—Ç–∏—Å—è —Å–∞–º—ñ –ø–æ —Å–æ–±—ñ",
            "–¥–∑–µ—Ä–∫–∞–ª–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞–ª–æ –Ω–µ —Ç–µ, —â–æ –º–∞–ª–æ",
            "–¥–≤–µ—Ä—ñ –ø–æ—á–∞–ª–∏ —Å–∫—Ä–∏–ø–ª—è—á–∏ –≤—ñ–¥—á–∏–Ω—è—Ç–∏—Å—è",
            "–æ—á—ñ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–ª–∏ –∑ —Ç–µ–º—Ä—è–≤–∏",
            "—á–∞—Å –Ω—ñ–±–∏ –∑—É–ø–∏–Ω–∏–≤—Å—è"
        ]
        
        story = template + " " + ". ".join(random.sample(story_parts, 3)) + "."
        return story

    async def generate_image(self, prompt):
        """–ì–µ–Ω–µ—Ä—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Hugging Face API"""
        headers = {"Authorization": f"Bearer {HUGGINGFACE_TOKEN}"}
        
        # –î–æ–¥–∞—î–º–æ horror —Å—Ç–∏–ª—å –¥–æ –ø—Ä–æ–º–ø—Ç—É
        enhanced_prompt = f"horror, scary, dark, {prompt}, cinematic lighting, detailed"
        
        payload = {"inputs": enhanced_prompt}
        
        async with aiohttp.ClientSession() as session:
            async with session.post(STABLE_DIFFUSION_API, headers=headers, json=payload) as response:
                if response.status == 200:
                    image_bytes = await response.read()
                    return Image.open(BytesIO(image_bytes))
                else:
                    # Fallback - —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–µ —Ç–µ–º–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    return self.create_fallback_image()

    def create_fallback_image(self):
        """–°—Ç–≤–æ—Ä—é—î fallback –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ"""
        img = Image.new('RGB', (1024, 1024), color='black')
        draw = ImageDraw.Draw(img)
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π scary —Ç–µ–∫—Å—Ç
        try:
            font = ImageFont.truetype("arial.ttf", 60)
        except:
            font = ImageFont.load_default()
            
        draw.text((512, 512), "HORROR", fill='red', anchor='mm', font=font)
        return img

    async def text_to_speech(self, text, output_path):
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –≤ –º–æ–≤—É —á–µ—Ä–µ–∑ Edge-TTS"""
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É –∑ –ø–æ—Ö–º—É—Ä–∏–º –≥–æ–ª–æ—Å–æ–º
        voice = "uk-UA-OstapNeural"  # –∞–±–æ "uk-UA-PolinaNeural"
        
        communicate = edge_tts.Communicate(text, voice)
        await communicate.save(output_path)

    async def create_video(self, image_path, audio_path, story_text, output_path):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–µ–æ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∞—É–¥—ñ–æ —Ç–∞ —Ç–µ–∫—Å—Ç—É"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
            image_clip = ImageClip(image_path)
            audio_clip = AudioFileClip(audio_path)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –∑–∞ –∞—É–¥—ñ–æ
            video_duration = audio_clip.duration
            image_clip = image_clip.set_duration(video_duration)
            
            # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫ —Å—É–±—Ç–∏—Ç—Ä–∏
            txt_clip = TextClip(story_text, 
                              fontsize=30, 
                              color='white', 
                              stroke_color='black',
                              stroke_width=2,
                              size=(800, None),
                              method='caption').set_position('center').set_duration(video_duration)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é
            video = CompositeVideoClip([image_clip, txt_clip])
            video = video.set_audio(audio_clip)
            
            # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—ñ–¥–µ–æ
            video.write_videofile(output_path, 
                                fps=24, 
                                codec='libx264',
                                audio_codec='aac',
                                temp_audiofile='temp-audio.m4a',
                                remove_temp=True)
            
            # –û—á–∏—â—É—î–º–æ –ø–∞–º'—è—Ç—å
            video.close()
            audio_clip.close()
            
        except Exception as e:
            logging.error(f"Error creating video: {e}")
            raise

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
generator = HorrorVideoGenerator()

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "üëª –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä–∞—à–Ω–∏—Ö –≤—ñ–¥–µ–æ –¥–ª—è TikTok!\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/horror - —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä–∞—à–Ω–µ –≤—ñ–¥–µ–æ\n"
        "/help - –¥–æ–ø–æ–º–æ–≥–∞"
    )

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(
        "üé¨ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ù–∞—Ç–∏—Å–Ω–∏ /horror –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ\n"
        "2. –ó–∞—á–µ–∫–∞–π –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –ø–æ–∫–∏ —è —Å—Ç–≤–æ—Ä—é —Ç–≤–æ—î —Å—Ç—Ä–∞—à–Ω–µ –≤—ñ–¥–µ–æ\n"
        "3. –û—Ç—Ä–∏–º–∞–π –≥–æ—Ç–æ–≤–µ –≤—ñ–¥–µ–æ –¥–ª—è TikTok!\n\n"
        "‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 1-3 —Ö–≤–∏–ª–∏–Ω–∏"
    )

@dp.message(Command("horror"))
async def create_horror_video(message: types.Message):
    status_msg = await message.answer("üé¨ –ü–æ—á–∏–Ω–∞—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä–∞—à–Ω–æ–≥–æ –≤—ñ–¥–µ–æ...")
    
    try:
        # 1. –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
        await status_msg.edit_text("üìù –ì–µ–Ω–µ—Ä—É—é —Å—Ç—Ä–∞—à–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é...")
        story = await generator.generate_horror_story()
        
        # 2. –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        await status_msg.edit_text("üñºÔ∏è –°—Ç–≤–æ—Ä—é—é —Å—Ç—Ä–∞—à–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        prompt = random.choice(generator.horror_prompts)
        image = await generator.generate_image(prompt)
        
        # 3. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        with tempfile.TemporaryDirectory() as temp_dir:
            image_path = os.path.join(temp_dir, "horror_image.png")
            audio_path = os.path.join(temp_dir, "horror_audio.wav")
            video_path = os.path.join(temp_dir, "horror_video.mp4")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image.save(image_path)
            
            # 4. –ì–µ–Ω–µ—Ä—É—î–º–æ –∞—É–¥—ñ–æ
            await status_msg.edit_text("üé§ –û–∑–≤—É—á—É—é —ñ—Å—Ç–æ—Ä—ñ—é...")
            await generator.text_to_speech(story, audio_path)
            
            # 5. –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ
            await status_msg.edit_text("üéûÔ∏è –ú–æ–Ω—Ç—É—é –≤—ñ–¥–µ–æ...")
            await generator.create_video(image_path, audio_path, story, video_path)
            
            # 6. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥–æ—Ç–æ–≤–µ –≤—ñ–¥–µ–æ
            await status_msg.edit_text("üì§ –ù–∞–¥—Å–∏–ª–∞—é –≥–æ—Ç–æ–≤–µ –≤—ñ–¥–µ–æ...")
            
            async with aiofiles.open(video_path, 'rb') as video_file:
                video_data = await video_file.read()
                
            await message.answer_video(
                video=types.BufferedInputFile(video_data, filename="horror_video.mp4"),
                caption=f"üëª –¢–≤–æ—î —Å—Ç—Ä–∞—à–Ω–µ –≤—ñ–¥–µ–æ –≥–æ—Ç–æ–≤–µ!\n\nüìñ –Ü—Å—Ç–æ—Ä—ñ—è: {story[:100]}..."
            )
            
    except Exception as e:
        logging.error(f"Error creating horror video: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
    
    finally:
        await status_msg.delete()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
